{"version":3,"names":[],"mappings":"","sources":["compiled/address-autcomplete.test.js"],"sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Autocomplete = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar _simulant = require('simulant');\n\nvar _simulant2 = _interopRequireDefault(_simulant);\n\nvar _addressAutcomplete = require('../src/address-autcomplete.js');\n\nvar _addressAutcomplete2 = _interopRequireDefault(_addressAutcomplete);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint import/no-extraneous-dependencies: [\"error\", {\"optionalDependencies\": false}] */\n/* global it, describe, expect, beforeEach, $, Cookies, FeatureFlagons, beforeAll, afterEach */\n\nvar openDropDown = function openDropDown() {\n\n    var formInput = window.AC.elements.autoCompleteInput;\n    formInput.focus();\n    formInput.setAttribute('value', '12');\n    _simulant2.default.fire(formInput, 'keyup');\n};\n\ndescribe('Google custom autocomplete dropdown', function () {\n\n    beforeEach(function () {\n\n        window.AC = new _addressAutcomplete2.default({\n            parent: 'body',\n            suburbs: [{\n                label: 'Sydney NSW 2000',\n                value: '2342243'\n            }, {\n                label: 'Ryde NSW 2000',\n                value: '123654'\n            }],\n            fields: {\n                state: false,\n                postcode: false\n            }\n        });\n    });\n\n    afterEach(function () {\n        window.AC.cleanUp();\n    });\n\n    it('It returns results from google.', function (done) {\n\n        window.AC._getResult('41', function (result) {\n            expect(result.length).toBeGreaterThan(0);\n            done();\n        });\n    }, 10000);\n\n    it('It creates dom elements from a string', function () {\n        expect(window.AC._generateElements().getAttribute('class')).toEqual('autocomplete-wrapper');\n    });\n\n    it('It creates an input field in the page', function () {\n        var eleCon = document.querySelector('.autocomplete-wrapper').constructor;\n        var compEleCon = document.createElement('div').constructor;\n        expect(eleCon).toEqual(compEleCon);\n    });\n\n    it('It is showing the autocomplete form', function () {\n        expect(window.AC.elements.manualForm.style.display === 'none' && window.AC.elements.autocompleteForm.style.display === 'block').toEqual(true);\n    });\n\n    it('It is showing the manual completion form', function () {\n        window.AC.currentForm = 'manual';\n        expect(window.AC.elements.manualForm.style.display === 'block' && window.AC.elements.autocompleteForm.style.display === 'none').toEqual(true);\n    });\n\n    it('Clicking cant find address changes form view', function (done) {\n\n        var eles = window.AC.elements;\n        var clickable = document.querySelector('[data-form-toggle]');\n        var e = new Event('click');\n\n        var test = [eles.manualForm.style.display === 'none' && eles.autocompleteForm.style.display === 'block'];\n\n        clickable.addEventListener('click', function () {\n            test.push(eles.manualForm.style.display === 'block' && eles.autocompleteForm.style.display === 'none');\n            expect(test.toString()).toEqual([true, true].toString());\n            done();\n        });\n\n        clickable.dispatchEvent(e);\n    }, 5000);\n\n    // it('it shows results on key input', done => {\n\n    //     openDropDown();\n\n    //     console.log('here');\n\n    //     window.AC.options.resultsUpdated = () => {\n\n    //         console.log('here 2');\n\n    //         expect(document.querySelector('.awesomplete ul').children.length).toBe(1);\n    //         done();\n\n    //     };\n\n    // }, 1000);\n\n    // it('A result is exposed once chosen from dropdown', done => {\n\n    //     window.AC.options.placeSelected = () => {\n\n    //         const result = Object.keys(window.AC.result).map((item) => {\n    //             return window.AC.result[item] !== undefined;\n    //         });\n\n    //         expect(result.indexOf(false) === -1 && result.length > 0).toBe(true);\n    //         done();\n\n    //     };\n\n\n    //     window.AC.options.resultsUpdated = () => {\n\n    //         const ele = document.querySelector('.awesomplete ul');\n    //         const eleChild = ele.children[0];\n    //         simulant.fire(eleChild, 'mousedown', {relatedTarget: ele});\n\n    //     };\n\n    //     openDropDown();\n\n    // }, 5000);\n\n\n    it('adds the stop class when invalid', function () {\n\n        window.AC.validate();\n\n        var manualForm = document.querySelector('[data-manual-form]');\n\n        var inputs = Array.from(manualForm.querySelector('input, select')).map(function (item) {\n            return item.classList.contains('stop');\n        });\n\n        expect(inputs.indexOf(false)).toBe(-1);\n    });\n\n    it('Shows error on null value', function () {\n\n        // const result = Object.keys(window.AC.result).map((item) => {\n        //     return window.AC.result[item] !== undefined;\n        // });\n\n        // expect(result.indexOf(false)).toBe(-1);\n\n    });\n});\n\n},{\"../src/address-autcomplete.js\":5,\"simulant\":4}],2:[function(require,module,exports){\n/**\n * Simple, lightweight, usable local autocomplete library for modern browsers\n * Because there weren’t enough autocomplete scripts in the world? Because I’m completely insane and have NIH syndrome? Probably both. :P\n * @author Lea Verou http://leaverou.github.io/awesomplete\n * MIT license\n */\n\n(function () {\n\nvar _ = function (input, o) {\n\tvar me = this;\n\n\t// Setup\n\n\tthis.input = $(input);\n\tthis.input.setAttribute(\"autocomplete\", \"off\");\n\tthis.input.setAttribute(\"aria-autocomplete\", \"list\");\n\n\to = o || {};\n\n\tconfigure(this, {\n\t\tminChars: 2,\n\t\tmaxItems: 10,\n\t\tautoFirst: false,\n\t\tdata: _.DATA,\n\t\tfilter: _.FILTER_CONTAINS,\n\t\tsort: _.SORT_BYLENGTH,\n\t\titem: _.ITEM,\n\t\treplace: _.REPLACE\n\t}, o);\n\n\tthis.index = -1;\n\n\t// Create necessary elements\n\n\tthis.container = $.create(\"div\", {\n\t\tclassName: \"awesomplete\",\n\t\taround: input\n\t});\n\n\tthis.ul = $.create(\"ul\", {\n\t\thidden: \"hidden\",\n\t\tinside: this.container\n\t});\n\n\tthis.status = $.create(\"span\", {\n\t\tclassName: \"visually-hidden\",\n\t\trole: \"status\",\n\t\t\"aria-live\": \"assertive\",\n\t\t\"aria-relevant\": \"additions\",\n\t\tinside: this.container\n\t});\n\n\t// Bind events\n\n\t$.bind(this.input, {\n\t\t\"input\": this.evaluate.bind(this),\n\t\t\"blur\": this.close.bind(this, { reason: \"blur\" }),\n\t\t\"keydown\": function(evt) {\n\t\t\tvar c = evt.keyCode;\n\n\t\t\t// If the dropdown `ul` is in view, then act on keydown for the following keys:\n\t\t\t// Enter / Esc / Up / Down\n\t\t\tif(me.opened) {\n\t\t\t\tif (c === 13 && me.selected) { // Enter\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\tme.select();\n\t\t\t\t}\n\t\t\t\telse if (c === 27) { // Esc\n\t\t\t\t\tme.close({ reason: \"esc\" });\n\t\t\t\t}\n\t\t\t\telse if (c === 38 || c === 40) { // Down/Up arrow\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\tme[c === 38? \"previous\" : \"next\"]();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t$.bind(this.input.form, {\"submit\": this.close.bind(this, { reason: \"submit\" })});\n\n\t$.bind(this.ul, {\"mousedown\": function(evt) {\n\t\tvar li = evt.target;\n\n\t\tif (li !== this) {\n\n\t\t\twhile (li && !/li/i.test(li.nodeName)) {\n\t\t\t\tli = li.parentNode;\n\t\t\t}\n\n\t\t\tif (li && evt.button === 0) {  // Only select on left click\n\t\t\t\tevt.preventDefault();\n\t\t\t\tme.select(li, evt.target);\n\t\t\t}\n\t\t}\n\t}});\n\n\tif (this.input.hasAttribute(\"list\")) {\n\t\tthis.list = \"#\" + this.input.getAttribute(\"list\");\n\t\tthis.input.removeAttribute(\"list\");\n\t}\n\telse {\n\t\tthis.list = this.input.getAttribute(\"data-list\") || o.list || [];\n\t}\n\n\t_.all.push(this);\n};\n\n_.prototype = {\n\tset list(list) {\n\t\tif (Array.isArray(list)) {\n\t\t\tthis._list = list;\n\t\t}\n\t\telse if (typeof list === \"string\" && list.indexOf(\",\") > -1) {\n\t\t\t\tthis._list = list.split(/\\s*,\\s*/);\n\t\t}\n\t\telse { // Element or CSS selector\n\t\t\tlist = $(list);\n\n\t\t\tif (list && list.children) {\n\t\t\t\tvar items = [];\n\t\t\t\tslice.apply(list.children).forEach(function (el) {\n\t\t\t\t\tif (!el.disabled) {\n\t\t\t\t\t\tvar text = el.textContent.trim();\n\t\t\t\t\t\tvar value = el.value || text;\n\t\t\t\t\t\tvar label = el.label || text;\n\t\t\t\t\t\tif (value !== \"\") {\n\t\t\t\t\t\t\titems.push({ label: label, value: value });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tthis._list = items;\n\t\t\t}\n\t\t}\n\n\t\tif (document.activeElement === this.input) {\n\t\t\tthis.evaluate();\n\t\t}\n\t},\n\n\tget selected() {\n\t\treturn this.index > -1;\n\t},\n\n\tget opened() {\n\t\treturn !this.ul.hasAttribute(\"hidden\");\n\t},\n\n\tclose: function (o) {\n\t\tif (!this.opened) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.ul.setAttribute(\"hidden\", \"\");\n\t\tthis.index = -1;\n\n\t\t$.fire(this.input, \"awesomplete-close\", o || {});\n\t},\n\n\topen: function () {\n\t\tthis.ul.removeAttribute(\"hidden\");\n\n\t\tif (this.autoFirst && this.index === -1) {\n\t\t\tthis.goto(0);\n\t\t}\n\n\t\t$.fire(this.input, \"awesomplete-open\");\n\t},\n\n\tnext: function () {\n\t\tvar count = this.ul.children.length;\n\n\t\tthis.goto(this.index < count - 1? this.index + 1 : -1);\n\t},\n\n\tprevious: function () {\n\t\tvar count = this.ul.children.length;\n\n\t\tthis.goto(this.selected? this.index - 1 : count - 1);\n\t},\n\n\t// Should not be used, highlights specific item without any checks!\n\tgoto: function (i) {\n\t\tvar lis = this.ul.children;\n\n\t\tif (this.selected) {\n\t\t\tlis[this.index].setAttribute(\"aria-selected\", \"false\");\n\t\t}\n\n\t\tthis.index = i;\n\n\t\tif (i > -1 && lis.length > 0) {\n\t\t\tlis[i].setAttribute(\"aria-selected\", \"true\");\n\t\t\tthis.status.textContent = lis[i].textContent;\n\n\t\t\t$.fire(this.input, \"awesomplete-highlight\", {\n\t\t\t\ttext: this.suggestions[this.index]\n\t\t\t});\n\t\t}\n\t},\n\n\tselect: function (selected, origin) {\n\t\tif (selected) {\n\t\t\tthis.index = $.siblingIndex(selected);\n\t\t} else {\n\t\t\tselected = this.ul.children[this.index];\n\t\t}\n\n\t\tif (selected) {\n\t\t\tvar suggestion = this.suggestions[this.index];\n\n\t\t\tvar allowed = $.fire(this.input, \"awesomplete-select\", {\n\t\t\t\ttext: suggestion,\n\t\t\t\torigin: origin || selected\n\t\t\t});\n\n\t\t\tif (allowed) {\n\t\t\t\tthis.replace(suggestion);\n\t\t\t\tthis.close({ reason: \"select\" });\n\t\t\t\t$.fire(this.input, \"awesomplete-selectcomplete\", {\n\t\t\t\t\ttext: suggestion\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t},\n\n\tevaluate: function() {\n\t\tvar me = this;\n\t\tvar value = this.input.value;\n\n\t\tif (value.length >= this.minChars && this._list.length > 0) {\n\t\t\tthis.index = -1;\n\t\t\t// Populate list with options that match\n\t\t\tthis.ul.innerHTML = \"\";\n\n\t\t\tthis.suggestions = this._list\n\t\t\t\t.map(function(item) {\n\t\t\t\t\treturn new Suggestion(me.data(item, value));\n\t\t\t\t})\n\t\t\t\t.filter(function(item) {\n\t\t\t\t\treturn me.filter(item, value);\n\t\t\t\t})\n\t\t\t\t.sort(this.sort)\n\t\t\t\t.slice(0, this.maxItems);\n\n\t\t\tthis.suggestions.forEach(function(text) {\n\t\t\t\t\tme.ul.appendChild(me.item(text, value));\n\t\t\t\t});\n\n\t\t\tif (this.ul.children.length === 0) {\n\t\t\t\tthis.close({ reason: \"nomatches\" });\n\t\t\t} else {\n\t\t\t\tthis.open();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.close({ reason: \"nomatches\" });\n\t\t}\n\t}\n};\n\n// Static methods/properties\n\n_.all = [];\n\n_.FILTER_CONTAINS = function (text, input) {\n\treturn RegExp($.regExpEscape(input.trim()), \"i\").test(text);\n};\n\n_.FILTER_STARTSWITH = function (text, input) {\n\treturn RegExp(\"^\" + $.regExpEscape(input.trim()), \"i\").test(text);\n};\n\n_.SORT_BYLENGTH = function (a, b) {\n\tif (a.length !== b.length) {\n\t\treturn a.length - b.length;\n\t}\n\n\treturn a < b? -1 : 1;\n};\n\n_.ITEM = function (text, input) {\n\tvar html = input === '' ? text : text.replace(RegExp($.regExpEscape(input.trim()), \"gi\"), \"<mark>$&</mark>\");\n\treturn $.create(\"li\", {\n\t\tinnerHTML: html,\n\t\t\"aria-selected\": \"false\"\n\t});\n};\n\n_.REPLACE = function (text) {\n\tthis.input.value = text.value;\n};\n\n_.DATA = function (item/*, input*/) { return item; };\n\n// Private functions\n\nfunction Suggestion(data) {\n\tvar o = Array.isArray(data)\n\t  ? { label: data[0], value: data[1] }\n\t  : typeof data === \"object\" && \"label\" in data && \"value\" in data ? data : { label: data, value: data };\n\n\tthis.label = o.label || o.value;\n\tthis.value = o.value;\n}\nObject.defineProperty(Suggestion.prototype = Object.create(String.prototype), \"length\", {\n\tget: function() { return this.label.length; }\n});\nSuggestion.prototype.toString = Suggestion.prototype.valueOf = function () {\n\treturn \"\" + this.label;\n};\n\nfunction configure(instance, properties, o) {\n\tfor (var i in properties) {\n\t\tvar initial = properties[i],\n\t\t    attrValue = instance.input.getAttribute(\"data-\" + i.toLowerCase());\n\n\t\tif (typeof initial === \"number\") {\n\t\t\tinstance[i] = parseInt(attrValue);\n\t\t}\n\t\telse if (initial === false) { // Boolean options must be false by default anyway\n\t\t\tinstance[i] = attrValue !== null;\n\t\t}\n\t\telse if (initial instanceof Function) {\n\t\t\tinstance[i] = null;\n\t\t}\n\t\telse {\n\t\t\tinstance[i] = attrValue;\n\t\t}\n\n\t\tif (!instance[i] && instance[i] !== 0) {\n\t\t\tinstance[i] = (i in o)? o[i] : initial;\n\t\t}\n\t}\n}\n\n// Helpers\n\nvar slice = Array.prototype.slice;\n\nfunction $(expr, con) {\n\treturn typeof expr === \"string\"? (con || document).querySelector(expr) : expr || null;\n}\n\nfunction $$(expr, con) {\n\treturn slice.call((con || document).querySelectorAll(expr));\n}\n\n$.create = function(tag, o) {\n\tvar element = document.createElement(tag);\n\n\tfor (var i in o) {\n\t\tvar val = o[i];\n\n\t\tif (i === \"inside\") {\n\t\t\t$(val).appendChild(element);\n\t\t}\n\t\telse if (i === \"around\") {\n\t\t\tvar ref = $(val);\n\t\t\tref.parentNode.insertBefore(element, ref);\n\t\t\telement.appendChild(ref);\n\t\t}\n\t\telse if (i in element) {\n\t\t\telement[i] = val;\n\t\t}\n\t\telse {\n\t\t\telement.setAttribute(i, val);\n\t\t}\n\t}\n\n\treturn element;\n};\n\n$.bind = function(element, o) {\n\tif (element) {\n\t\tfor (var event in o) {\n\t\t\tvar callback = o[event];\n\n\t\t\tevent.split(/\\s+/).forEach(function (event) {\n\t\t\t\telement.addEventListener(event, callback);\n\t\t\t});\n\t\t}\n\t}\n};\n\n$.fire = function(target, type, properties) {\n\tvar evt = document.createEvent(\"HTMLEvents\");\n\n\tevt.initEvent(type, true, true );\n\n\tfor (var j in properties) {\n\t\tevt[j] = properties[j];\n\t}\n\n\treturn target.dispatchEvent(evt);\n};\n\n$.regExpEscape = function (s) {\n\treturn s.replace(/[-\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n};\n\n$.siblingIndex = function (el) {\n\t/* eslint-disable no-cond-assign */\n\tfor (var i = 0; el = el.previousElementSibling; i++);\n\treturn i;\n};\n\n// Initialization\n\nfunction init() {\n\t$$(\"input.awesomplete\").forEach(function (input) {\n\t\tnew _(input);\n\t});\n}\n\n// Are we in a browser? Check for Document constructor\nif (typeof Document !== \"undefined\") {\n\t// DOM already loaded?\n\tif (document.readyState !== \"loading\") {\n\t\tinit();\n\t}\n\telse {\n\t\t// Wait for it\n\t\tdocument.addEventListener(\"DOMContentLoaded\", init);\n\t}\n}\n\n_.$ = $;\n_.$$ = $$;\n\n// Make sure to export Awesomplete on self when in a browser\nif (typeof self !== \"undefined\") {\n\tself.Awesomplete = _;\n}\n\n// Expose Awesomplete as a CJS module\nif (typeof module === \"object\" && module.exports) {\n\tmodule.exports = _;\n}\n\nreturn _;\n\n}());\n\n},{}],3:[function(require,module,exports){\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.deepmerge = factory();\n    }\n}(this, function () {\n\nfunction isMergeableObject(val) {\n    var nonNullObject = val && typeof val === 'object'\n\n    return nonNullObject\n        && Object.prototype.toString.call(val) !== '[object RegExp]'\n        && Object.prototype.toString.call(val) !== '[object Date]'\n}\n\nfunction emptyTarget(val) {\n    return Array.isArray(val) ? [] : {}\n}\n\nfunction cloneIfNecessary(value, optionsArgument) {\n    var clone = optionsArgument && optionsArgument.clone === true\n    return (clone && isMergeableObject(value)) ? deepmerge(emptyTarget(value), value, optionsArgument) : value\n}\n\nfunction defaultArrayMerge(target, source, optionsArgument) {\n    var destination = target.slice()\n    source.forEach(function(e, i) {\n        if (typeof destination[i] === 'undefined') {\n            destination[i] = cloneIfNecessary(e, optionsArgument)\n        } else if (isMergeableObject(e)) {\n            destination[i] = deepmerge(target[i], e, optionsArgument)\n        } else if (target.indexOf(e) === -1) {\n            destination.push(cloneIfNecessary(e, optionsArgument))\n        }\n    })\n    return destination\n}\n\nfunction mergeObject(target, source, optionsArgument) {\n    var destination = {}\n    if (isMergeableObject(target)) {\n        Object.keys(target).forEach(function (key) {\n            destination[key] = cloneIfNecessary(target[key], optionsArgument)\n        })\n    }\n    Object.keys(source).forEach(function (key) {\n        if (!isMergeableObject(source[key]) || !target[key]) {\n            destination[key] = cloneIfNecessary(source[key], optionsArgument)\n        } else {\n            destination[key] = deepmerge(target[key], source[key], optionsArgument)\n        }\n    })\n    return destination\n}\n\nfunction deepmerge(target, source, optionsArgument) {\n    var array = Array.isArray(source);\n    var options = optionsArgument || { arrayMerge: defaultArrayMerge }\n    var arrayMerge = options.arrayMerge || defaultArrayMerge\n\n    if (array) {\n        return Array.isArray(target) ? arrayMerge(target, source, optionsArgument) : cloneIfNecessary(source, optionsArgument)\n    } else {\n        return mergeObject(target, source, optionsArgument)\n    }\n}\n\ndeepmerge.all = function deepmergeAll(array, optionsArgument) {\n    if (!Array.isArray(array) || array.length < 2) {\n        throw new Error('first argument should be an array with at least two elements')\n    }\n\n    // we are sure there are at least 2 values, so it is safe to have no initial value\n    return array.reduce(function(prev, next) {\n        return deepmerge(prev, next, optionsArgument)\n    })\n}\n\nreturn deepmerge\n\n}));\n\n},{}],4:[function(require,module,exports){\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.simulant = factory());\n}(this, function () { 'use strict';\n\n\tvar defaults = {\n\t\tbubbles:       true,\n\t\tcancelable:    true,\n\t\tview:          window,\n\t\tdetail:        null,\n\t\tscreenX:       0,\n\t\tscreenY:       0,\n\t\tclientX:       0,\n\t\tclientY:       0,\n\t\tctrlKey:       false,\n\t\taltKey:        false,\n\t\tshiftKey:      false,\n\t\tmetaKey:       false,\n\t\tbutton:        0,\n\t\trelatedTarget: null,\n\t\tlocale:        '',\n\t\toldURL:        '',\n\t\tnewURL:        '',\n\t\torigin:        '',\n\t\tlastEventId:   '',\n\t\tsource:        null,\n\t\tports:         [],\n\t\toldValue:      null,\n\t\tnewValue:      null,\n\t\turl:           '',\n\t\tstorageArea:   null,\n\t\tdeltaX:        0,\n\t\tdeltaY:        0,\n\t\tdeltaZ:        0,\n\t\tdeltaMode:     0\n\t};\n\n\n\t// TODO remove the ones that aren't supported in any browser\n\tvar eventTypesByGroup = {\n\t\tUIEvent:                     'abort error resize scroll select unload',\n\t\tEvent:                       'afterprint beforeprint cached canplay canplaythrough change chargingchange chargingtimechange checking close dischargingtimechange DOMContentLoaded downloading durationchange emptied ended fullscreenchange fullscreenerror input invalid levelchange loadeddata loadedmetadata noupdate obsolete offline online open orientationchange pause pointerlockchange pointerlockerror play playing ratechange readystatechange reset seeked seeking stalled submit success suspend timeupdate updateready visibilitychange volumechange waiting',\n\t\tAnimationEvent:              'animationend animationiteration animationstart',\n\t\tAudioProcessingEvent:        'audioprocess',\n\t\tBeforeUnloadEvent:           'beforeunload',\n\t\tTimeEvent:                   'beginEvent endEvent repeatEvent',\n\t\tFocusEvent:                  'blur focus focusin focusout',\n\t\tMouseEvent:                  'click contextmenu dblclick mousedown mouseenter mouseleave mousemove mouseout mouseover mouseup show',\n\t\tSensorEvent:                 'compassneedscalibration userproximity',\n\t\tOfflineAudioCompletionEvent: 'complete',\n\t\tCompositionEvent:            'compositionend compositionstart compositionupdate',\n\t\tClipboardEvent:              'copy cut paste',\n\t\tDeviceLightEvent:            'devicelight',\n\t\tDeviceMotionEvent:           'devicemotion',\n\t\tDeviceOrientationEvent:      'deviceorientation',\n\t\tDeviceProximityEvent:        'deviceproximity',\n\t\tDragEvent:                   'drag dragend dragenter dragleave dragover dragstart drop',\n\t\tGamepadEvent:                'gamepadconnected gamepaddisconnected',\n\t\tHashChangeEvent:             'hashchange',\n\t\tKeyboardEvent:               'keydown keypress keyup',\n\t\tProgressEvent:               'loadend loadstart progress timeout',\n\t\tMessageEvent:                'message',\n\t\tPageTransitionEvent:         'pagehide pageshow',\n\t\tPopStateEvent:               'popstate',\n\t\tStorageEvent:                'storage',\n\t\tSVGEvent:                    'SVGAbort SVGError SVGLoad SVGResize SVGScroll SVGUnload',\n\t\tSVGZoomEvent:                'SVGZoom',\n\t\tTouchEvent:                  'touchcancel touchend touchenter touchleave touchmove touchstart',\n\t\tTransitionEvent:             'transitionend',\n\t\tWheelEvent:                  'wheel'\n\t};\n\n\tvar eventGroupByType = {};\n\n\tObject.keys( eventTypesByGroup ).forEach( function ( group ) {\n\t\tvar types = eventTypesByGroup[ group ].split( ' ' );\n\n\t\ttypes.forEach( function ( t ) {\n\t\t\teventGroupByType[t] = group;\n\t\t});\n\t});\n\n\n\t// The parameters required by event constructors and init methods, in the order the init methods need them.\n\n\t// There is no initKeyboardEvent or initKeyEvent here. Keyboard events are a goddamned mess. You can't fake them\n\t// well in any browser - the which and keyCode properties are readonly, for example. So we don't actually use the\n\t// KeyboardEvent constructor, or the initKeyboardEvent or initKeyEvent methods. Instead we use a bog standard\n\t// Event and add the required parameters as expando properties.\n\n\t// TODO I think in some browsers we need to use modifiersList instead of ctrlKey/shiftKey etc?\n\tvar initialiserParams = {\n\t\tinitUIEvent:          'view detail',\n\t\tinitMouseEvent:       'view detail screenX screenY clientX clientY ctrlKey altKey shiftKey metaKey button relatedTarget',\n\t\tinitTouchEvent:       'view detail touches targetTouches changedTouches ctrlKey altKey shiftKey metaKey',\n\t\tinitCompositionEvent: 'view detail data locale',\n\t\tinitHashChangeEvent:  'oldURL newURL',\n\t\tinitMessageEvent:     'data origin lastEventId source ports',\n\t\tinitStorageEvent:     'key oldValue newValue url storageArea',\n\t\tinitWheelEvent:       'view detail screenX screenY clientX clientY ctrlKey altKey shiftKey metaKey button relatedTarget deltaX deltaY deltaZ deltaMode'\n\t};\n\n\tObject.keys( initialiserParams ).forEach( function ( initMethod ) {\n\t\tinitialiserParams[ initMethod ] = initialiserParams[ initMethod ].split( ' ' );\n\t});\n\n\n\tvar initialisersByGroup = {\n\t\tUIEvent:             [ window.UIEvent,             'initUIEvent'          ],\n\t\tEvent:               [ window.Event,               'initEvent'            ],\n\t\tFocusEvent:          [ window.FocusEvent,          'initUIEvent'          ],\n\t\tMouseEvent:          [ window.MouseEvent,          'initMouseEvent'       ],\n\t\tCompositionEvent:    [ window.CompositionEvent,    'initCompositionEvent' ],\n\t\tHashChangeEvent:     [ window.HashChangeEvent,     'initHashChangeEvent'  ],\n\t\tKeyboardEvent:       [ window.Event,               'initEvent'            ],\n\t\tProgressEvent:       [ window.ProgressEvent,       'initEvent'            ],\n\t\tMessageEvent:        [ window.MessageEvent,        'initMessageEvent'     ], // TODO prefixed?\n\t\tPageTransitionEvent: [ window.PageTransitionEvent, 'initEvent'            ],\n\t\tPopStateEvent:       [ window.PopStateEvent,       'initEvent'            ],\n\t\tStorageEvent:        [ window.StorageEvent,        'initStorageEvent'     ],\n\t\tTouchEvent:          [ window.TouchEvent,          'initTouchEvent'       ],\n\t\tWheelEvent:          [ window.WheelEvent,          'initWheelEvent'       ] // TODO this differs between browsers...\n\t};\n\n\tvar keyboardParams = [ 'altKey', 'charCode', 'code', 'ctrlKey', 'isComposing', 'key', 'keyCode', 'keyIdentifier', 'location', 'metaKey', 'repeat', 'shiftKey', 'which' ];\n\n\tfunction extendWithKeyboardParams ( event, params ) {\n\t\tif ( params === void 0 ) params = {};\n\n\t\tvar i = keyboardParams.length;\n\t\twhile ( i-- ) {\n\t\t\tevent[ keyboardParams[i] ] = params[ keyboardParams[i] ];\n\t\t}\n\t}\n\n\tfunction ancient () {\n\t\tfunction makeInitialiser ( methodName, paramsList ) {\n\t\t\treturn function ( event, type, params ) {\n\t\t\t\tevent.type = type;\n\n\t\t\t\tvar i = paramsList.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tvar paramName = paramsList[i];\n\t\t\t\t\tevent[ paramName ] = params[ paramName ] || defaults[ paramName ];\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tvar initialisers = {};\n\t\tvar methodName;\n\n\t\tfor ( methodName in initialiserParams ) {\n\t\t\tif ( initialiserParams.hasOwnProperty( methodName ) ) {\n\t\t\t\tinitialisers[ methodName ] = makeInitialiser( methodName, initialiserParams[ methodName ] );\n\t\t\t}\n\t\t}\n\n\t\tinitialisers.initEvent = makeInitialiser( 'initEvent', [] );\n\n\t\tfunction simulant ( type, params ) {\n\t\t\tvar group = eventGroupByType[ type ];\n\t\t\tvar isKeyboardEvent;\n\n\t\t\tif ( group === 'KeyboardEvent' ) {\n\t\t\t\tisKeyboardEvent = true;\n\t\t\t\tgroup = 'Event';\n\t\t\t}\n\n\t\t\tvar initialiserName = initialisersByGroup[ group ][1];\n\t\t\tvar initialise = initialisers[ initialiserName ];\n\n\t\t\tvar event = document.createEventObject();\n\t\t\tinitialise( event, type, params || {} );\n\n\t\t\tif ( isKeyboardEvent ) {\n\t\t\t\textendWithKeyboardParams( event, params );\n\t\t\t}\n\n\t\t\treturn event;\n\t\t}\n\n\t\tsimulant.mode = 'ancient';\n\t\treturn simulant;\n\t}\n\n\tfunction legacy () {\n\t\tfunction makeInitialiser ( methodName, paramsList ) {\n\t\t\treturn function ( event, type, params ) {\n\t\t\t\tvar args;\n\n\t\t\t\t// first three args are always `type`, `bubbles`, `cancelable`\n\t\t\t\targs = [ type, true, true ]; // TODO some events don't bubble?\n\n\t\t\t\tparamsList.forEach( function ( paramName ) {\n\t\t\t\t\targs.push( params[ paramName ] || defaults[ paramName ] );\n\t\t\t\t});\n\n\t\t\t\tevent[ methodName ].apply( event, args );\n\t\t\t};\n\t\t}\n\n\t\tvar initialisers = {};\n\n\t\tObject.keys( initialiserParams ).forEach( function ( methodName ) {\n\t\t\tinitialisers[ methodName ] = makeInitialiser( methodName, initialiserParams[ methodName ] );\n\t\t});\n\n\t\tinitialisers.initEvent = makeInitialiser( 'initEvent', [] );\n\n\t\tfunction simulant ( type, params ) {\n\t\t\tvar event, group, initialiserName, initialise, isKeyboardEvent;\n\n\t\t\tgroup = eventGroupByType[ type ];\n\n\t\t\tif ( group === 'KeyboardEvent' ) {\n\t\t\t\tisKeyboardEvent = true;\n\t\t\t\tgroup = 'Event';\n\t\t\t}\n\n\t\t\tinitialiserName = initialisersByGroup[ group ][1];\n\t\t\tinitialise = initialisers[ initialiserName ];\n\n\t\t\tevent = document.createEvent( group );\n\t\t\tinitialise( event, type, params || {} );\n\n\t\t\tif ( isKeyboardEvent ) {\n\t\t\t\textendWithKeyboardParams( event, params );\n\t\t\t}\n\n\t\t\treturn event;\n\t\t}\n\n\t\tsimulant.mode = 'legacy';\n\t\treturn simulant;\n\t}\n\n\tfunction modern () {\n\t\tfunction simulant ( type, params ) {\n\t\t\tif ( params === void 0 ) params = {};\n\n\t\t\tvar group = eventGroupByType[ type ];\n\t\t\tvar isKeyboardEvent;\n\n\t\t\tif ( group === 'KeyboardEvent' ) {\n\t\t\t\tgroup = 'Event'; // because you can't fake KeyboardEvents well in any browser\n\t\t\t\tisKeyboardEvent = true;\n\t\t\t}\n\n\t\t\tvar initialiser = ( initialisersByGroup[ group ] || initialisersByGroup.Event );\n\n\t\t\tvar Constructor = initialiser[0] || window.Event;\n\t\t\tvar method = initialiser[1];\n\n\t\t\tvar extendedParams = {\n\t\t\t\tbubbles: true, // TODO some events don't bubble?\n\t\t\t\tcancelable: true\n\t\t\t};\n\n\t\t\tvar paramsList = initialiserParams[ method ];\n\t\t\tvar i = ( paramsList ? paramsList.length : 0 );\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tvar paramName = paramsList[i];\n\t\t\t\textendedParams[ paramName ] = ( paramName in params ? params[ paramName ] : defaults[ paramName ] );\n\t\t\t}\n\n\t\t\tvar event = new Constructor( type, extendedParams );\n\n\t\t\tif ( isKeyboardEvent ) {\n\t\t\t\textendWithKeyboardParams( event, params );\n\t\t\t}\n\n\t\t\treturn event;\n\t\t}\n\n\t\tsimulant.mode = 'modern';\n\t\treturn simulant;\n\t}\n\n\tfunction polyfill () {\n\t\t// https://gist.github.com/Rich-Harris/6010282 via https://gist.github.com/jonathantneal/2869388\n\t\t// addEventListener polyfill IE6+\n\t\tvar Event, addEventListener, removeEventListener, head, style;\n\n\t\tEvent = function ( e, element ) {\n\t\t\tvar property, instance = this;\n\n\t\t\tfor ( property in e ) {\n\t\t\t\tinstance[ property ] = e[ property ];\n\t\t\t}\n\n\t\t\tinstance.currentTarget =  element;\n\t\t\tinstance.target = e.srcElement || element;\n\t\t\tinstance.timeStamp = +new Date();\n\n\t\t\tinstance.preventDefault = function () {\n\t\t\t\te.returnValue = false;\n\t\t\t};\n\n\t\t\tinstance.stopPropagation = function () {\n\t\t\t\te.cancelBubble = true;\n\t\t\t};\n\t\t};\n\n\t\taddEventListener = function ( type, listener ) {\n\t\t\tvar element = this, listeners, i;\n\n\t\t\tlisteners = element.listeners || ( element.listeners = [] );\n\t\t\ti = listeners.length;\n\n\t\t\tlisteners[i] = [ listener, function (e) {\n\t\t\t\tlistener.call( element, new Event( e, element ) );\n\t\t\t}];\n\n\t\t\telement.attachEvent( 'on' + type, listeners[i][1] );\n\t\t};\n\n\t\tremoveEventListener = function ( type, listener ) {\n\t\t\tvar element = this, listeners, i;\n\n\t\t\tif ( !element.listeners ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlisteners = element.listeners;\n\t\t\ti = listeners.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( listeners[i][0] === listener ) {\n\t\t\t\t\telement.detachEvent( 'on' + type, listeners[i][1] );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\twindow.addEventListener = document.addEventListener = addEventListener;\n\t\twindow.removeEventListener = document.removeEventListener = removeEventListener;\n\n\t\tif ( 'Element' in window ) {\n\t\t\tElement.prototype.addEventListener = addEventListener;\n\t\t\tElement.prototype.removeEventListener = removeEventListener;\n\t\t} else {\n\t\t\thead = document.getElementsByTagName('head')[0];\n\t\t\tstyle = document.createElement('style');\n\n\t\t\thead.insertBefore( style, head.firstChild );\n\n\t\t\tstyle.styleSheet.cssText = '*{-ms-event-prototype:expression(!this.addEventListener&&(this.addEventListener=addEventListener)&&(this.removeEventListener=removeEventListener))}';\n\t\t}\n\n\t\taddEventListener.simulant = true;\n\t}\n\n\tvar simulant;\n\n\ttry {\n\t\tnew MouseEvent( 'click' );\n\t\tsimulant = modern();\n\t} catch ( err ) {\n\t\tif ( !document.createEvent ) {\n\t\t\tif ( document.createEventObject ) {\n\t\t\t\tsimulant = ancient();\n\t\t\t} else {\n\t\t\t\tthrow new Error( 'Events cannot be created in this browser' );\n\t\t\t}\n\t\t} else {\n\t\t\tsimulant = legacy();\n\t\t}\n\t}\n\n\tif ( document.dispatchEvent ) {\n\t\tsimulant.fire = function ( node, event, params ) {\n\t\t\tif ( typeof event === 'string' ) {\n\t\t\t\tevent = simulant( event, params );\n\t\t\t}\n\n\t\t\tnode.dispatchEvent( event );\n\t\t\treturn event;\n\t\t};\n\t} else if ( document.fireEvent ) {\n\t\tsimulant.fire = function ( node, event, params ) {\n\t\t\tif ( typeof event === 'string' ) {\n\t\t\t\tevent = simulant( event, params );\n\t\t\t}\n\n\t\t\tnode.fireEvent( 'on' + event.type, event );\n\n\t\t\t// Special case - checkbox inputs\n\t\t\tif ( node.tagName === 'INPUT' && node.type === 'checkbox' ) {\n\t\t\t\tnode.click();\n\t\t\t}\n\t\t\treturn event;\n\t\t};\n\t}\n\n\tsimulant.polyfill = polyfill;\n\n\tvar simulant$1 = simulant;\n\n\treturn simulant$1;\n\n}));\n\n},{}],5:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global google */\n\nvar _awesomplete = require('awesomplete');\n\nvar _awesomplete2 = _interopRequireDefault(_awesomplete);\n\nvar _deepmerge = require('deepmerge');\n\nvar _deepmerge2 = _interopRequireDefault(_deepmerge);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar AutocompleteGoogle = function () {\n    function AutocompleteGoogle() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, AutocompleteGoogle);\n\n        this.options = options;\n        this.service = new google.maps.places.AutocompleteService();\n        this.placesService = new google.maps.places.PlacesService(document.createElement('div'));\n        this.elements = {};\n        this.fields = {\n            streetNumber: true,\n            streetName: true,\n            suburb: true,\n            state: true,\n            postcode: true\n        };\n\n        //configure plugin\n\n        this.options.suburbsPlaceHolder = options.suburbsPlaceHolder || 'Please select';\n\n        if (this.options.suburbs) {\n            this.options.suburbs.unshift({\n                label: this.options.suburbsPlaceHolder,\n                value: null\n            });\n        }\n\n        Object.assign(this.fields, this.options.fields);\n        this.options.formShow = options.formShow || 'autocomplete';\n\n        //create the forme elements\n\n        this._generateElements();\n\n        // create the form\n\n        this.addressForm = this._generateElements();\n        document.querySelector(this.options.parent).appendChild(this.addressForm);\n\n        //get the indivual elements\n\n        this.elements = {\n            manualForm: this.addressForm.querySelector('[data-manual-form]'),\n            autocompleteForm: this.addressForm.querySelector('[data-autocomplete-form]'),\n            formToggle: this.addressForm.querySelector('[data-form-toggle]'),\n            autoCompleteInput: this.addressForm.querySelector('[data-autocomplete-input]')\n        };\n\n        this.elements.inputs = this.addressForm.querySelectorAll('input, select');\n        this.elements.manualInputs = this.addressForm.querySelectorAll('input, select');\n\n        this.currentForm = this.options.formShow;\n        this._addEvents();\n        this._cleanForm();\n    }\n\n    _createClass(AutocompleteGoogle, [{\n        key: '_utils',\n        value: function _utils() {\n\n            return {\n\n                /**\n                * Remove all special characters and spaces from a string\n                * @param {string} string - The string to clean\n                */\n\n                cleanString: function cleanString(string) {\n                    string = string.toLowerCase();\n                    return string.replace(/[^A-Z0-9]/ig, '');\n                },\n\n\n                /**\n                * Removes an element and returns it\n                * @param {element} element - The element to remove\n                */\n\n                removeElement: function removeElement(element) {\n                    element.parentNode.removeChild(element);\n                    return element;\n                },\n\n\n                /**\n                * Converts array like item to an array\n                * @param {object} obj - The object to convert\n                */\n\n                toArray: function toArray(obj) {\n\n                    var array = [];\n\n                    for (var i = 0; i < obj.length; i++) {\n                        array[i] = obj[i];\n                    }\n\n                    return array;\n                },\n\n\n                /**\n                * Delegates an event to a child element\n                * @param {string} parent - A css selector of the parent element\n                * @param {string} target - A css selector of the target element\n                * @param {string} type - The type of event\n                * @param {function} code - The function to execute if a target is clicked\n                */\n\n                delegate: function delegate(parent, target, type, code) {\n                    var _this = this;\n\n                    document.querySelector(parent).addEventListener(type, function (e) {\n\n                        var targets = _this.toArray(document.querySelectorAll(target));\n\n                        if (targets.indexOf(e.target) > -1) {\n                            if (code) code(e);\n                        }\n                    }, type === 'blur' || type === 'focus');\n                },\n\n\n                /**\n                * Delegates an event to a child element\n                * @param {element} element - The element whose ancestor you want.\n                * @param {string} ancestor - A css selector of the ancestor element you want to target\n                */\n\n                getAncestor: function getAncestor(element, ancestor) {\n\n                    var current = element;\n                    var chosen = null;\n\n                    while (current.parentNode.constructor !== document.constructor || chosen === null) {\n                        current = current.parentNode;\n\n                        if (current.matches(ancestor)) {\n                            chosen = current;\n                        }\n                    }\n\n                    return chosen;\n                }\n            };\n        }\n    }, {\n        key: 'cleanUp',\n        value: function cleanUp() {\n\n            if (this.addressForm) {\n                this.addressForm.parentNode.removeChild(this.addressForm);\n            } else {\n                console.warn('Nothing in page to clean up');\n            }\n        }\n    }, {\n        key: 'validate',\n        value: function validate(element) {\n            var _this2 = this;\n\n            this.isValid = false;\n\n            var renderView = function renderView(ele, condition) {\n\n                ele = _this2._utils().getAncestor(ele, '.input-wrapper');\n\n                //add class to input field\n                if (condition) {\n                    ele.setAttribute('data-is-valid', true);\n                    ele.classList.remove('stop');\n                    ele.classList.add('go');\n                } else {\n                    ele.setAttribute('data-is-valid', false);\n                    ele.classList.remove('go');\n                    ele.classList.add('stop');\n                }\n            };\n\n            var valCheck = function valCheck(val) {\n\n                var valid = !(val === null || val === '' || val === 'null' || val === undefined);\n\n                return valid;\n            };\n\n            if (this.currentForm === 'autocomplete') {\n\n                this.isValid = this.placeChosen !== null;\n                renderView(this.elements.autoCompleteInput, this.isValid);\n            } else if (this.currentForm === 'manual') {\n                (function () {\n\n                    var elementIsValid = function elementIsValid(ele, item) {\n\n                        var valCheckResult = valCheck(_this2.result[item]);\n\n                        if (ele.tagName === 'SELECT') {\n                            return ele.children[0].value !== ele.value && valCheckResult;\n                        }\n\n                        return valCheck(ele.value) && valCheckResult;\n                    };\n\n                    // Configure individual element\n                    if (element) {\n                        var googleKey = element.getAttribute('data-google-places-key');\n                        var valid = elementIsValid(element, googleKey);\n                        renderView(element, valid);\n                    }\n\n                    //Check the entire form for validity\n                    var isValid = Object.keys(_this2.result).map(function (item) {\n                        var ele = _this2.elements.manualForm.querySelector('[data-google-places-key=\"' + item + '\"]');\n                        return elementIsValid(ele, item);\n                    });\n\n                    if (isValid.indexOf(false) === -1) {\n                        _this2.isValid = true;\n                    }\n                })();\n            }\n\n            return this.isValid;\n        }\n    }, {\n        key: '_cleanForm',\n        value: function _cleanForm() {\n            var _this3 = this;\n\n            this.result = {};\n            this.isValid = null;\n            this.placeChosen = null;\n\n            if (this.currentForm === 'manual') {\n\n                this.elements.manualInputs.forEach(function (item) {\n                    item.value = '';\n                    item.setAttribute('value', '');\n                    _this3.result[item.getAttribute('data-google-places-key')] = null;\n                });\n\n                if (this.options.suburbs) {\n                    this.result.locality = this.options.suburbs[0].value;\n                }\n            }\n        }\n    }, {\n        key: '_cleanAutoComplete',\n        value: function _cleanAutoComplete() {\n            this.result = {};\n            this.isValid = null;\n            this.placeChosen = null;\n            this.elements.autoCompleteInput.value = '';\n            this.elements.autoCompleteInput.setAttribute('value', '');\n        }\n    }, {\n        key: '_getResult',\n        value: function _getResult(input, onResult) {\n\n            if (location.hostname === 'localhost') {\n                onResult([{\n                    description: '126 Princes Highway, Bolwarra, Victoria, Australia',\n                    id: 'f3ba2d2b971163fc9f3de716d1232f9386d0cc3b',\n                    matched_substrings: [{\n                        length: 2,\n                        offset: 0\n                    }],\n                    place_id: 'ChIJ57-9r9-QnaoRZzzxfcRRHew',\n                    reference: 'ClRKAAAAwIG0qank1q8kRkxGydb4RcCQD6MchOWjOamYLRvNmiQnzFmFMntn_K4iC-hsKmHwl46GcFbs4Ck6Tz8Isd9VDg0TvX7Kxf9B1NTPvR2RwiISEEElzX-M03xToF38WrGve2YaFMXoC_U3_maC12ElKtzTSD_TqbA8',\n                    structured_formatting: {\n                        main_text: '126 Princes Highway',\n                        main_text_matched_substrings: [{\n                            length: 2,\n                            offset: 0\n                        }],\n                        secondary_text: 'Bolwarra, Victoria, Australia'\n                    },\n                    terms: [{\n                        offset: 0,\n                        value: '126'\n                    }, {\n                        offset: 4,\n                        value: 'Princes Highway'\n                    }, {\n                        offset: 21,\n                        value: 'Bolwarra'\n                    }, {\n                        offset: 31,\n                        value: 'Victoria'\n                    }, {\n                        offset: 41,\n                        value: 'Australia'\n                    }],\n                    types: ['street_address', 'geocode']\n                }]);\n            } else {\n                this.service.getPlacePredictions({\n                    input: input,\n                    componentRestrictions: { country: 'au' },\n                    types: ['address']\n                }, function (predictions, status) {\n\n                    if (status === google.maps.places.PlacesServiceStatus.OK || status !== 'ZERO_RESULTS') {\n                        onResult(predictions);\n                    }\n                });\n            }\n        }\n    }, {\n        key: '_generateElements',\n        value: function _generateElements() {\n            var _this4 = this;\n\n            var content = {\n                formToggle: \"Can't find your address?\",\n                streetNumber: {\n                    error: 'Please enter a street number.',\n                    label: 'Street Number',\n                    placeholder: 'Street Number'\n                },\n                streetName: {\n                    error: 'Please enter a street name.',\n                    label: 'Street Name',\n                    placeholder: 'Street Name'\n                },\n                suburb: {\n                    error: 'Please choose a suburb.',\n                    label: 'Suburb',\n                    placeholder: 'Suburb'\n                },\n                state: {\n                    error: 'Please enter a state.',\n                    label: 'State',\n                    placeholder: 'State'\n                },\n                postcode: {\n                    error: 'Please enter a postcode.',\n                    label: 'Postcode',\n                    placeholder: 'Postcode'\n                },\n                autocompleteGoogle: {\n                    error: 'Please select an option from the dropdown.',\n                    label: 'Address',\n                    placeholder: 'Address'\n                }\n            };\n\n            if (this.options.content) {\n                content = (0, _deepmerge2.default)(content, this.options.content);\n            }\n\n            var getSuburbInput = function getSuburbInput() {\n\n                var suburbInput = void 0;\n\n                if (_this4.options.suburbs) {\n\n                    suburbInput = '<select data-google-places-key=\"locality\" id=\"autocomplete-suburb\" name=\"autocomplete-suburb\" data-is-valid=\"false\">';\n\n                    _this4.options.suburbs.forEach(function (item) {\n                        suburbInput += '<option value=\"' + item.value + '\">' + item.label + '</option>';\n                    });\n\n                    suburbInput += '</select>';\n                } else {\n\n                    suburbInput = '<input type=\"text\" placeholder=\"' + content.suburb.placeholder + '\" data-google-places-key=\"locality\" id=\"autocomplete-suburb\" name=\"autocomplete-suburb\" data-is-valid=\"false\"/></span>';\n                }\n\n                return suburbInput;\n            };\n\n            var streetNumber = {\n                true: '<div>\\n                    <label class=\"autocomplete-label\" for=\"autocomplete-street-number\">' + content.streetNumber.label + '</label>\\n                    <div class=\"input-wrapper\">\\n                        <span>\\n                        <input type=\"text\" placeholder=\"' + content.streetNumber.placeholder + '\" data-google-places-key=\"street_number\" id=\"autocomplete-street-number\" name=\"autocomplete-street-number\" data-is-valid=\"false\"/></span>\\n                         <p class=\"label-text\">' + content.streetNumber.error + '</p>\\n                     </div>\\n                </div>',\n                false: ''\n            };\n\n            var streetName = {\n                true: '<div>\\n                <label class=\"autocomplete-label\" for=\"autocomplete-street-name\">' + content.streetName.label + '</label>\\n                <div class=\"input-wrapper\">\\n                    <span><input type=\"text\" placeholder=\"' + content.streetName.placeholder + '\" data-google-places-key=\"route\" id=\"autocomplete-street-name\" name=\"autocomplete-street-name\" data-is-valid=\"false\"/></span>\\n                     <p class=\"label-text\">' + content.streetName.error + '</p>\\n                 </div>\\n            </div>',\n                false: ''\n            };\n\n            var suburb = {\n                true: '<div>\\n                <label class=\"autocomplete-label\" for=\"autocomplete-suburb\">' + content.suburb.label + '</label>\\n                <div class=\"input-wrapper\">\\n                    <span>' + getSuburbInput() + '</span>\\n                    <p class=\"label-text\">' + content.suburb.error + '</p>\\n                </div>\\n            </div>',\n                false: ''\n            };\n\n            var state = {\n                true: '<div>\\n                <label class=\"autocomplete-label\" for=\"autocomplete-state\">' + content.state.label + '</label>\\n                <div class=\"input-wrapper\">\\n                    <span><select placeholder=\"' + content.state.placeholder + '\" data-google-places-key=\"administrative_area_level_1\" id=\"autocomplete-state\" name=\"autocomplete-state\" data-is-valid=\"false\"/></span>\\n                    <p class=\"label-text\">' + content.state.error + '</p>\\n                </div>\\n            </div>',\n                false: ''\n            };\n\n            var postcode = {\n                true: '<div>\\n                    <label class=\"autocomplete-label\" for=\"autocomplete-postcode\">' + content.postcode.label + '</label>\\n                    <div class=\"input-wrapper\">\\n                        <span><input type=\"number\" placeholder=\"' + content.postcode.placeholder + '\" data-google-places-key=\"postal_code\" id=\"autocomplete-postcode\" name=\"autocomplete-postcode\" data-is-valid=\"false\"/></span>\\n                        <p class=\"label-text\">' + content.postcode.error + '</p>\\n                    </div>\\n                </div>\\n            </div>',\n                false: ''\n            };\n\n            var parser = new DOMParser();\n\n            var string = '\\n            <div class=\"autocomplete-wrapper\" data-autocomplete-wrapper>\\n                <div class=\"autocomplete-form\" data-autocomplete-form>\\n                    <label class=\"autocomplete-label\" for=\"autocomplete-google\">' + content.autocompleteGoogle.label + '</label>\\n                    <div class=\"input-wrapper\">\\n                        <span><input type=\"text\" placeholder=\"' + content.autocompleteGoogle.placeholder + '\" data-autocomplete-input id=\"autocomplete-google\" name=\"autocomplete-google\" data-is-valid=\"false\"/></span>\\n                         <p class=\"label-text\">' + content.autocompleteGoogle.error + '</p>\\n                     </div>\\n                     <p><a href=\"#\" data-form-toggle>' + content.formToggle + '</a></p>\\n                </div>\\n                <div class=\"manual-form\" data-manual-form>\\n                    ' + streetNumber[this.fields.streetNumber] + '\\n                    ' + streetName[this.fields.streetName] + '\\n                    ' + suburb[this.fields.suburb] + '\\n                    ' + state[this.fields.state] + '\\n                    ' + postcode[this.fields.postcode] + '\\n                </div>\\n            </div>';\n\n            return parser.parseFromString(string, 'text/html').querySelector('.autocomplete-wrapper');\n        }\n    }, {\n        key: '_addEvents',\n        value: function _addEvents() {\n            var _this5 = this;\n\n            this.awesomplete = new _awesomplete2.default(this.elements.autoCompleteInput, {\n                replace: function replace(item) {\n                    this.input.value = item.label.replace('<br>', ' ');\n                }\n            });\n\n            var switchForms = function switchForms(e) {\n                e.preventDefault();\n                _this5._cleanForm();\n                if (_this5.currentForm === 'autocomplete') _this5.currentForm = 'manual';else if (_this5.currentForm === 'manual') _this5.currentForm = 'autocomplete';\n            };\n\n            var resetResult = function resetResult() {\n                _this5.result = {};\n                _this5.placeChosen = true;\n                _this5.elements.autoCompleteInput.removeEventListener('keyup', resetResult);\n            };\n\n            var getDropDownResults = function getDropDownResults(e) {\n\n                var checkKeyCode = function checkKeyCode(keycode) {\n                    return [keycode === 13, keycode === 27, keycode === 38, keycode === 40].indexOf(true) === -1;\n                };\n\n                if (checkKeyCode(e.keyCode)) {\n                    (function () {\n\n                        var inputValue = _this5.elements.autoCompleteInput.value;\n\n                        var splitAt = function splitAt(index, it) {\n                            return [it.slice(0, index), it.slice(index).replace(', ', '').replace(', Australia', '')];\n                        };\n\n                        if (inputValue) {\n\n                            _this5._getResult(inputValue, function (result) {\n\n                                _this5._cleanForm();\n                                _this5.awesomplete.list = result.map(function (item) {\n\n                                    var formattedResult = splitAt(item.description.indexOf(','), item.description);\n                                    return { value: item.place_id, label: formattedResult[0] + '<br>' + formattedResult[1] };\n                                });\n\n                                if (typeof _this5.options.resultsUpdated === 'function') {\n                                    _this5.options.resultsUpdated(_this5.awesomplete.list);\n                                }\n                            });\n                        }\n                    })();\n                }\n            };\n\n            var chooseResult = function chooseResult(e) {\n\n                var callback = function callback(place, status) {\n\n                    if (status === 'OK') {\n\n                        _this5.result = {};\n                        _this5.placeChosen = true;\n                        place.address_components.forEach(function (item) {\n                            _this5.result[item.types[0]] = item.short_name;\n                        });\n                        _this5.validate();\n                    } else {\n                        throw new Error('Place service request returned error: ' + status);\n                    }\n\n                    //callback\n                    if (typeof _this5.options.placeSelected === 'function') {\n                        _this5.options.placeSelected(_this5.result);\n                    }\n                };\n\n                if (location.hostname === 'localhost') {\n                    callback({\n                        address_components: [{\n                            long_name: '126',\n                            short_name: '126',\n                            types: ['street_number']\n                        }, {\n                            long_name: 'Princes Highway',\n                            short_name: 'Princes Hwy',\n                            types: ['route']\n                        }, {\n                            long_name: 'Bolwarra',\n                            short_name: 'Bolwarra',\n                            types: ['locality', 'political']\n                        }, {\n                            long_name: 'Glenelg Shire',\n                            short_name: 'Glenelg',\n                            types: ['administrative_area_level_2', 'political']\n                        }, {\n                            long_name: 'Victoria',\n                            short_name: 'VIC',\n                            types: ['administrative_area_level_1', 'political']\n                        }, {\n                            long_name: 'Australia',\n                            short_name: 'AU',\n                            types: ['country', 'political']\n                        }, {\n                            long_name: '3305',\n                            short_name: '3305',\n                            types: ['postal_code']\n                        }],\n                        adr_address: '<span class=\"street-address\">126 Princes Hwy</span>, <span class=\"locality\">Bolwarra</span> <span class=\"region\">VIC</span> <span class=\"postal-code\">3305</span>, <span class=\"country-name\">Australia</span>',\n                        formatted_address: '126 Princes Hwy, Bolwarra VIC 3305, Australia',\n                        geometry: {\n                            location: {\n                                lat: -38.2911794,\n                                lng: 141.6087061\n                            },\n                            viewport: {\n                                northeast: {\n                                    lat: -38.2908923,\n                                    lng: 141.60889155\n                                },\n                                southwest: {\n                                    lat: -38.2912751,\n                                    lng: 141.60814975\n                                }\n                            }\n                        },\n                        icon: 'https://maps.gstatic.com/mapfiles/place_api/icons/geocode-71.png',\n                        id: 'f3ba2d2b971163fc9f3de716d1232f9386d0cc3b',\n                        name: '126 Princes Hwy',\n                        place_id: 'ChIJ57-9r9-QnaoRZzzxfcRRHew',\n                        reference: 'CmRbAAAAljNnvRrFOL1qBBWcKq7No3_qQwimcTHrBQud9GPjDx5ycgQk31RrndZlUX7JUx5BNldG9COlCOxsFOUWGbYp6PuMthBfiUCH2hg3Uq1bj1wFlNeBuLwUzmNZKUrM4NDTEhDbDnkkWuHCfHt5m5hrNgI0GhQ1SisXvVIvWy-yszulPV9coo7unQ',\n                        scope: 'GOOGLE',\n                        types: ['street_address'],\n                        url: 'https://maps.google.com/?q=126+Princes+Hwy,+Bolwarra+VIC+3305,+Australia&ftid=0xaa9d90dfafbdbfe7:0xec1d51c47df13c67',\n                        utc_offset: 660,\n                        vicinity: 'Bolwarra'\n                    }, 'OK');\n                } else {\n                    _this5.placesService.getDetails({ placeId: e.text.value }, callback);\n                }\n            };\n\n            var updateManualInput = function updateManualInput(e) {\n                var key = e.target.getAttribute('data-google-places-key');\n                _this5.result[key] = e.target.value;\n            };\n\n            var validate = function validate(e) {\n                _this5.validate(e.target);\n                _this5.validate();\n            };\n\n            var emptyResult = function emptyResult() {\n                _this5._cleanAutoComplete();\n            };\n\n            this.elements.formToggle.addEventListener('click', switchForms);\n            this.elements.autoCompleteInput.addEventListener('keyup', resetResult);\n            this.elements.autoCompleteInput.addEventListener('keyup', getDropDownResults);\n            this.elements.autoCompleteInput.addEventListener('focus', emptyResult);\n\n            this._utils().delegate('[data-autocomplete-wrapper]', 'input, select', 'blur', validate);\n\n            this._utils().delegate('[data-autocomplete-wrapper]', 'select', 'change', function (e) {\n                updateManualInput(e);\n                validate(e);\n            });\n\n            this._utils().delegate('[data-manual-form]', 'input', 'keyup', updateManualInput);\n\n            document.addEventListener('awesomplete-selectcomplete', function (e) {\n                chooseResult(e);\n            });\n        }\n    }, {\n        key: 'currentForm',\n        get: function get() {\n            return this.options.formShow;\n        },\n        set: function set(val) {\n\n            if (val === 'autocomplete' || val === 'manual') {\n\n                this.options.formShow = val;\n\n                if (val === 'autocomplete') {\n                    this.elements.manualForm.style.display = 'none';\n                    this.elements.autocompleteForm.style.display = 'block';\n                } else {\n                    this.elements.manualForm.style.display = 'block';\n                    this.elements.autocompleteForm.style.display = 'none';\n                }\n            } else {\n                console.warn('currentForm can only be set to \"autocomplete\" or \"manual\"');\n            }\n        }\n    }]);\n\n    return AutocompleteGoogle;\n}();\n\nexports.default = AutocompleteGoogle;\n\n},{\"awesomplete\":2,\"deepmerge\":3}]},{},[1])(1)\n});"],"file":"address-autcomplete.test.js"}